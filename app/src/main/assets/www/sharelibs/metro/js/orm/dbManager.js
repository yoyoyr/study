!function(){var DBManager=function(utils){var dbManager=this;this.autoCommit=!0,this.DBManagerException=function(e){this.message="[DBException]"+e};var DBManagerException=this.DBManagerException;this.open=function(e,n,t){if(utils.isNull(dbManager.persistenceStore)){utils.isNull(t)&&(t=5242880);var i="1.0";dbManager.persistenceStore=persistence.store.cordovasql.config(persistence,e,i,n,t)}},this.close=function(){persistence=null},this.schemaSync=function(e){persistence.schemaSync(e)};var _schemaSync=function(e,n){if(dbManager.autoCommit){if(!utils.isFunction(e))return dbManager.schemaSync(),n;dbManager.schemaSync(function(){e(n)})}};this.defineTable=function(tableDefined,onCreateFinished){if(utils.isNull(tableDefined))return void console.error("failed to create table , input is null!");var tableName=tableDefined.name,schema=tableDefined.schema,tableSchema=persistence.define(tableName,schema),tableSchemas={};return eval("tableSchemas."+tableName+" = tableSchema"),_schemaSync(onCreateFinished,tableSchemas)},this.defineTables=function(tableDefineds,onCreateFinished){if(utils.isNull(tableDefineds))return void console.error("failed to create tables , input is null!");if(!utils.isArray(tableDefineds))return void console.error("failed to create tables , input is not typeof array!");var tableSchemas={};return tableDefineds.forEach(function(tableDefined){var tableName=tableDefined.name,schema=tableDefined.schema;persistence.define(tableName,schema);var tableSchema=persistence.define(tableName,schema);eval("tableSchemas."+tableName+" = tableSchema")}),_schemaSync(onCreateFinished,tableSchemas)};var _dataSync=function(e){dbManager.autoCommit&&dbManager.flush(e)};this.saveOrUpdate=function(e,n){persistence.add(e),_dataSync(n)},this.remove=function(e,n){persistence.remove(e),_dataSync(n)},this.flush=function(e){persistence.transaction(function(n){persistence.flush(n,function(){e&&e()})})},this.inTransaction=function(e,n){persistence.transaction(function(){e(),dbManager.autoCommit&&!utils.isNull(n)&&utils.isFunction(n)&&dbManager.flush(n)})},this.runSQL=function(e,n){window.persistence.transaction(function(t){t.executeSql(e,null,function(t){console.log("run sql:"+e+" done,result:"+JSON.stringify(t)),n&&n()},function(t,i){console.log("run sql:"+e+" error,result:"+i.message),n&&n()})})},this.forceUpdateDB=function(e){window.persistence.transaction(function(){e()})},this.PropertyFilter=persistence.PropertyFilter,this.AndFilter=persistence.AndFilter,this.OrFileter=persistence.OrFilter,this.NullFilter=persistence.NullFilter};define(["utils"],function(e){return new DBManager(e)})}();