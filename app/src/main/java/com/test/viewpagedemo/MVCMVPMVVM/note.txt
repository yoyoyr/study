MVC
M
V  (XML文件)
C  (Activity)
用户点击V开始计算，V调用C的方法发起计算，C将具体的逻辑委托给M，M层计算出结果后更新V
MVP
M
V Activity
P
用户点击V开始计算，V调用P的方法计算，P将具体逻辑委托给M，M将计算结果返回给P，P在通知V层更新视图

比较:
    1.V层替换为Activity，同时可以定义一个V层交互的接口，便于V与P能够面向接口编程。
      传统的以xml为V层，如果V层的视图控件A设置数据方法为setA。如果更换控件B则，C层不得不调用setB()方法改变视图，
      M层的逻辑也可能跟着改变
    2.P层成为V与M的交互的中间对象，使得V和M没有直接的联系，解耦。

缺点:
    1.类变多，不适合小程序
    2.相比于MVC的C，P层承担了更多的责任，必然导致臃肿
    3.只能ui驱动数据变化，无法数据驱动ui变化