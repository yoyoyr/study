
1.依赖导入
  在app的build.glide文件中
  javaCompileOptions {
      annotationProcessorOptions {
      //指定apt文件生成位置
          arguments = [eventBusIndex: 'com.test.viewpagedemo.EventBus.EventbusSubscriber']
      }
  }

  dependencies {
      implementation 'org.greenrobot:eventbus:3.1.1'
      annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'
  }

2.源码分析
//在发送事件的时候，会根据这个集合，利用反射，将事件分发给对应的类的方法
    Map<Class<?>//事件类，标注了@Subscribe方法的入参,
        //添加到list的什么位置是根据优先级决定的
        CopyOnWriteArrayList<Subscription{
            Object subscriber;////包含了有@Subscribe的类
            SubscriberMethod subscriberMethod;//标注了@Subscribe的方法
    }>> subscriptionsByEventType

//事件解绑的时候，可以根据这个集合获取到所有注册的事件，然后从subscriptionByEventType取消注册
    Map<Object//包含了@Subscribe的类, List<Class<?>//事件对应的类>> typesBySubscriber

//粘性事件的Class为key，事件对象为value
    Map<Class<?>, Object> stickyEvents
